<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE FBType SYSTEM "../LibraryElement.dtd">
<FBType GUID="8F3A0CED3C038327" Name="overcurrent" Comment="Basic Function Block Type" Namespace="Main">
  <Attribute Name="Configuration.FB.IDCounter" Value="0" />
  <Identification Standard="61499-2" />
  <VersionInfo Organization="nxtControl GmbH" Version="0.0" Author="Chen-Wei" Date="21/03/2016" Remarks="Template" />
  <InterfaceList>
    <EventInputs>
      <Event Name="INIT" Comment="Initialization Request">
        <With Var="dCFG_CurveType" />
        <With Var="rStartLevel" />
        <With Var="rConstant_K" />
        <With Var="rDefiniteTime" />
      </Event>
      <Event Name="REQ" Comment="Normal Execution Request">
        <With Var="rMeasuredCurrent" />
      </Event>
      <Event Name="RESET" />
    </EventInputs>
    <EventOutputs>
      <Event Name="INITO" Comment="Initialization Confirm" />
      <Event Name="CNF" Comment="Execution Confirmation">
        <With Var="rTimeToTrip" />
        <With Var="mTrip" />
      </Event>
      <Event Name="Debugg">
        <With Var="rTimeToTrip" />
      </Event>
      <Event Name="SAMPLE" />
      <Event Name="TripRESET" />
    </EventOutputs>
    <InputVars>
      <VarDeclaration Name="rMeasuredCurrent" Type="REAL" Comment="Input event qualifier" />
      <VarDeclaration Name="dCFG_CurveType" Type="INT" />
      <VarDeclaration Name="rStartLevel" Type="REAL" />
      <VarDeclaration Name="rConstant_K" Type="REAL" />
      <VarDeclaration Name="rDefiniteTime" Type="REAL" />
    </InputVars>
    <OutputVars>
      <VarDeclaration Name="rTimeToTrip" Type="REAL" />
      <VarDeclaration Name="mTrip" Type="BOOL" />
    </OutputVars>
  </InterfaceList>
  <BasicFB>
    <InternalVars>
      <VarDeclaration Name="mStart" Type="BOOL" />
    </InternalVars>
    <ECC>
      <ECState Name="START" Comment="Initial State" x="552.9412" y="429.4117" />
      <ECState Name="INIT" Comment="Initialization" x="923.5294" y="141.1765">
        <ECAction Algorithm="INIT" Output="INITO" />
      </ECState>
      <ECState Name="REQ" Comment="Normal execution" x="1429.647" y="672.9412">
        <ECAction Algorithm="REQ" Output="SAMPLE" />
        <ECAction Output="Debugg" />
      </ECState>
      <ECState Name="StartTimer" x="1360" y="1332">
        <ECAction Output="CNF" />
      </ECState>
      <ECState Name="TripReset" x="352" y="1120">
        <ECAction Output="TripRESET" />
      </ECState>
      <ECTransition Source="START" Destination="INIT" Condition="INIT" x="731.1476" y="204.8375" />
      <ECTransition Source="INIT" Destination="START" Condition="1" x="797.5924" y="348.3232" />
      <ECTransition Source="START" Destination="REQ" Condition="REQ" x="976.4514" y="468.1972">
        <Attribute Name="Configuration.Transaction.BezierPoints" Value="213.7141,105.4923,269.1147,119.3908" />
      </ECTransition>
      <ECTransition Source="StartTimer" Destination="TripReset" Condition="RESET" x="594.5732" y="1492.84">
        <Attribute Name="Configuration.Transaction.BezierPoints" Value="167.1116,399.4648,97.51266,382.7316" />
      </ECTransition>
      <ECTransition Source="REQ" Destination="START" Condition="NOT mStart" x="1001.425" y="636.272">
        <Attribute Name="Configuration.Transaction.BezierPoints" Value="278.5059,171.317,224.5467,156.3283" />
      </ECTransition>
      <ECTransition Source="REQ" Destination="StartTimer" Condition="mStart" x="1478.682" y="1005.093">
        <Attribute Name="Configuration.Transaction.BezierPoints" Value="376.9897,228.3246,372.489,274.6588" />
      </ECTransition>
      <ECTransition Source="TripReset" Destination="START" Condition="1" x="450.6386" y="699.7059">
        <Attribute Name="Configuration.Transaction.BezierPoints" Value="106.0104,193.1025,120.2249,144.2505" />
      </ECTransition>
    </ECC>
    <Algorithm Name="INIT" Comment="Initialization algorithm">
      <ST Text="&#xD;&#xA;INIT := 0;&#xD;&#xA;mStart := FALSE;&#xD;&#xA;;" />
    </Algorithm>
    <Algorithm Name="REQ" Comment="Normally executed algorithm&#xD;&#xA;&#xD;&#xA;Version:      1.04 2016-03-21 First Version&#xD;&#xA;&#xD;&#xA;Curvtype: (dCFG_CurveType)&#xD;&#xA;&#xD;&#xA;0 : Definite time&#xD;&#xA;1: IEC Normal Inverse&#xD;&#xA;2: IEC Very Inverse&#xD;&#xA;3: IEC Extremely Inverse&#xD;&#xA;4: RI Curve&#xD;&#xA;">
      <ST Text="&#xD;&#xA;VAR&#xD;&#xA;	ans1:REAL;&#xD;&#xA;	ans2:REAL;&#xD;&#xA;	ans3:REAL;&#xD;&#xA;	veryLargeNumber:REAL:= 9999999;&#xD;&#xA;END_VAR;&#xD;&#xA;&#xD;&#xA;REQ := 0;&#xD;&#xA;&#xD;&#xA;IF (rMeasuredCurrent &gt;= rStartLevel) THEN&#xD;&#xA;	(* The current is over start level (pickup) *)&#xD;&#xA;	mStart:=TRUE;&#xD;&#xA;ELSIF (rMeasuredCurrent &lt; ( rStartLevel * 0.95 )) THEN&#xD;&#xA;	(* Under start level *)&#xD;&#xA;	mStart:=FALSE;&#xD;&#xA;	rTimeToTrip:=0.0;&#xD;&#xA;	(* IF tmrTripPulse.Q THEN&#xD;&#xA;		mTrip:=FALSE;&#xD;&#xA;	END_IF; *)&#xD;&#xA;END_IF;&#xD;&#xA;&#xD;&#xA;IF mStart THEN&#xD;&#xA;		(* Calculate time to trip *)&#xD;&#xA;	CASE dCFG_CurveType OF&#xD;&#xA;		1: (* IEC Normal Inverse *)&#xD;&#xA;		&#xD;&#xA;		IF (rStartLevel = 0.0) THEN&#xD;&#xA;			ans1 := EXPT(veryLargeNumber, 0.02);&#xD;&#xA;		ELSE&#xD;&#xA;			ans1 := EXPT((rMeasuredCurrent/rStartLevel) , 0.02);&#xD;&#xA;		END_IF;&#xD;&#xA;		&#xD;&#xA;		IF ((ans1 - 1.0) = 0.0) THEN&#xD;&#xA;		  ans2 := veryLargeNumber;&#xD;&#xA;		ELSE&#xD;&#xA;		  ans2 := 0.14/(ans1 - 1.0);&#xD;&#xA;		END_IF;&#xD;&#xA;		rTimeToTrip := rConstant_K*ans2;&#xD;&#xA;		mTrip := TRUE;&#xD;&#xA;		&#xD;&#xA;		2: (* IEC Very Inverse *)&#xD;&#xA;		&#xD;&#xA;		IF (rStartLevel = 0.0) THEN&#xD;&#xA;			ans1 := veryLargeNumber - 1.0;&#xD;&#xA;		ELSE&#xD;&#xA;			ans1 := (rMeasuredCurrent/rStartLevel) - 1.0;&#xD;&#xA;		END_IF;&#xD;&#xA;		&#xD;&#xA;		IF (ans1 = 0.0) THEN&#xD;&#xA;		  ans2 := veryLargeNumber;&#xD;&#xA;		ELSE&#xD;&#xA;		  ans2 := 13.5/ans1;&#xD;&#xA;		END_IF;&#xD;&#xA;		rTimeToTrip := rConstant_K*ans2;&#xD;&#xA;		mTrip := TRUE;&#xD;&#xA;		&#xD;&#xA;		3: (* IEC Extremely Inverse *)&#xD;&#xA;		&#xD;&#xA;		IF (rStartLevel = 0.0) THEN&#xD;&#xA;			ans1 := EXPT(veryLargeNumber, 2.0);&#xD;&#xA;		ELSE&#xD;&#xA;			ans1 := EXPT((rMeasuredCurrent/rStartLevel) , 2.0);&#xD;&#xA;		END_IF;&#xD;&#xA;		&#xD;&#xA;		IF ((ans1 - 1.0) = 0.0) THEN&#xD;&#xA;		  ans2 := veryLargeNumber;&#xD;&#xA;		ELSE&#xD;&#xA;		  ans2 := 80.0/(ans1 - 1.0);&#xD;&#xA;		END_IF;&#xD;&#xA;		rTimeToTrip := rConstant_K*ans2;&#xD;&#xA;		mTrip := TRUE;&#xD;&#xA;		&#xD;&#xA;		4: (* RI Curve *)&#xD;&#xA;		&#xD;&#xA;		IF (rStartLevel = 0.0) THEN&#xD;&#xA;			ans1 := veryLargeNumber;&#xD;&#xA;		ELSE&#xD;&#xA;			ans1 := rMeasuredCurrent/rStartLevel;&#xD;&#xA;		END_IF;&#xD;&#xA;		&#xD;&#xA;		IF (ans1 = 0.0) THEN&#xD;&#xA;		  ans2 := veryLargeNumber;&#xD;&#xA;		ELSE&#xD;&#xA;		  ans2 := 0.339-(0.236/ans1);&#xD;&#xA;		END_IF;&#xD;&#xA;		&#xD;&#xA;		IF (ans2 = 0.0) THEN&#xD;&#xA;			ans3 := veryLargeNumber;&#xD;&#xA;		ELSE&#xD;&#xA;			ans3 := (1.0/ans2);&#xD;&#xA;		END_IF;&#xD;&#xA;		&#xD;&#xA;		rTimeToTrip := rConstant_K*ans3;&#xD;&#xA;		mTrip := TRUE;&#xD;&#xA;		&#xD;&#xA;		ELSE&#xD;&#xA;			(* Definite Time *)&#xD;&#xA;			rTimeToTrip := rDefiniteTime;&#xD;&#xA;			mTrip := TRUE;&#xD;&#xA;	END_CASE;&#xD;&#xA;	&#xD;&#xA;END_IF;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;;" />
    </Algorithm>
    <Algorithm Name="RESET">
      <ST Text="&#xD;&#xA;mStart := FALSE;&#xD;&#xA;&#xD;&#xA;;" />
    </Algorithm>
    <Algorithm Name="CalculateTime">
      <ST Text="&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;;" />
    </Algorithm>
  </BasicFB>
</FBType>